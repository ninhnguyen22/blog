import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as s,o as t}from"./app-BDQL9qnX.js";const a={};function r(o,i){return t(),e("div",null,i[0]||(i[0]=[s(`<h3 id="description" tabindex="-1"><a class="header-anchor" href="#description"><span>Description</span></a></h3><blockquote><p>DI containers are often software libraries that provides Dependency Injection functionality and allows automating many of the tasks involved in <strong>Object Composition</strong>, <strong>Interception</strong>, and <strong>Lifetime Management</strong>. DI Containers are also known as Inversion of Control (IoC) Containers.</p></blockquote><ul><li>Nơi quản lí và thực hiện dependency injection.</li></ul><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h3><p>Mình đã build 1 application sử dụng DI container để quản lí các dependency .</p><p>Như example trước</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$fooController</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> FooController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> FooRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> FooService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>AbstractContainer là DI container nơi register và resolve các dependency của application,</li><li>Không cần khởi tạo các dependency của FooController vì đã register các dependency ở AbstractContainer</li><li>AbstractContainer sử dụng Reflection để tìm các dependency của FooController và tự động inject chúng.</li></ul><p>Application.php</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> array</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">	FooServiceInterface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FooService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">	FooRepositoryInterface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FooRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trong Laravel, nếu dependency là 1 class thì không cần khai báo các dependency đó, vì Service Container của Laravel đã dùng Reflection và đệ quy để tự động tìm các dependency và inject chúng.</p><p>example: BarController</p><hr><p>Github: <a href="https://github.com/ninhnguyen22/nin" title="https://github.com/ninhnguyen22/nin" target="_blank" rel="noopener noreferrer">https://github.com/ninhnguyen22/nin</a></p>`,14)]))}const h=n(a,[["render",r]]),c=JSON.parse('{"path":"/blogs/OOP/di-container_226.html","title":"DI Container","lang":"en-US","frontmatter":{"title":"DI Container","date":"2025-08-08T00:00:00.000Z","tags":["OOP","DI"],"categories":["OOP"],"author":"Admin","location":"VN","description":"DI Container","image":null,"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DI Container\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-08T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Admin\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/blogs/OOP/di-container_226.html"}],["meta",{"property":"og:site_name","content":"Nin Blog"}],["meta",{"property":"og:title","content":"DI Container"}],["meta",{"property":"og:description","content":"DI Container"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Admin"}],["meta",{"property":"article:tag","content":"DI"}],["meta",{"property":"article:tag","content":"OOP"}],["meta",{"property":"article:published_time","content":"2025-08-08T00:00:00.000Z"}]]},"git":{},"readingTime":{"minutes":0.7,"words":210},"filePathRelative":"blogs/OOP/di-container_226.md","excerpt":"<h3>Description</h3>\\n<blockquote>\\n<p>DI containers are often software libraries that provides Dependency Injection functionality and allows automating many of the tasks involved in <strong>Object Composition</strong>, <strong>Interception</strong>, and <strong>Lifetime Management</strong>. DI Containers are also known as Inversion of Control (IoC) Containers.</p>\\n</blockquote>"}');export{h as comp,c as data};

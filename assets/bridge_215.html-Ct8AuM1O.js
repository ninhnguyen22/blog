import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as a,o as n}from"./app-BDQL9qnX.js";const t={};function l(p,s){return n(),e("div",null,s[0]||(s[0]=[a(`<h3 id="description" tabindex="-1"><a class="header-anchor" href="#description"><span>Description</span></a></h3><blockquote><p><strong>Bridge</strong> is a structural design pattern that divides business logic or huge class into separate class hierarchies that can be developed independently.</p></blockquote><ul><li>Tách phần abstraction (structural) với phần implementation(xử lí business logic).</li></ul><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h3><p>Từ example của Abstract Factory, class Page update theo Bridge pattern</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Page</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PageRenderer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $pageRenderer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __construct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PageRenderer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $pageRenderer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        $this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pageRenderer</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $pageRenderer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$arguments</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> $this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pageRenderer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$arguments</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tách phần implement render sang class PageRenderer.</p>`,7)]))}const d=i(t,[["render",l]]),k=JSON.parse('{"path":"/blogs/OOP/bridge_215.html","title":"Bridge","lang":"en-US","frontmatter":{"title":"Bridge","date":"2025-08-08T00:00:00.000Z","tags":["OOP","Pattern"],"categories":["OOP"],"author":"Admin","location":"VN","description":"Bridge","image":null,"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bridge\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-08T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Admin\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/blogs/OOP/bridge_215.html"}],["meta",{"property":"og:site_name","content":"Nin Blog"}],["meta",{"property":"og:title","content":"Bridge"}],["meta",{"property":"og:description","content":"Bridge"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Admin"}],["meta",{"property":"article:tag","content":"Pattern"}],["meta",{"property":"article:tag","content":"OOP"}],["meta",{"property":"article:published_time","content":"2025-08-08T00:00:00.000Z"}]]},"git":{},"readingTime":{"minutes":0.33,"words":100},"filePathRelative":"blogs/OOP/bridge_215.md","excerpt":"<h3>Description</h3>\\n<blockquote>\\n<p><strong>Bridge</strong> is a structural design pattern that divides business logic or huge class into separate class hierarchies that can be developed independently.</p>\\n</blockquote>\\n<ul>\\n<li>Tách phần abstraction (structural) với phần implementation(xử lí business logic).</li>\\n</ul>"}');export{d as comp,k as data};

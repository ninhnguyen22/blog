import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as r,o as a}from"./app-BDQL9qnX.js";const i={};function c(o,t){return a(),e("div",null,t[0]||(t[0]=[r('<h2 id="what-s-a-design-pattern" tabindex="-1"><a class="header-anchor" href="#what-s-a-design-pattern"><span>What’s a design pattern?</span></a></h2><blockquote><p>Design patterns are typical solutions to commonly occurring problems in software design. They are like pre-made blueprints that you can customize to solve a recurring design problem in your code.</p></blockquote><ul><li>Design pattern là 1 phương pháp điển hình để giải quyết các vấn đề của phát triển phần mềm.</li><li>Chúng giống như những bản thiết kế mẫu đầu tiên để từ đó xây dựng code.</li><li>Không phải là đoạn code cụ thể mà là khái niệm để giải quyết các vấn đề cụ thể.</li></ul><h2 id="catalog" tabindex="-1"><a class="header-anchor" href="#catalog"><span>Catalog</span></a></h2><h3 id="i-creational-pattern" tabindex="-1"><a class="header-anchor" href="#i-creational-pattern"><span>I. Creational pattern:</span></a></h3><p>Những Design pattern loại này cung cấp một giải pháp để tạo ra các object và che giấu được logic của việc tạo ra nó, thay vì tạo ra object một cách trực tiếp bằng cách sử dụng method new. Điều này giúp cho chương trình trở nên mềm dẻo hơn trong việc quyết định object nào cần được tạo ra trong những tình huống được đưa ra.</p><table><thead><tr><th>#</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>1</td><td>Singleton</td><td>Create chỉ 1 instance của object dù được call nhiều lần trong app.</td></tr><tr><td>2</td><td>Factory Method</td><td>Create object mà không chỉ định cấu trúc, tạo 1 instance bằng method mà không dùng operator new Foo</td></tr><tr><td>3</td><td>Abstract factory</td><td>Create object mà không chỉ định cấu trúc, các class cùng implement 1 interface</td></tr><tr><td>4</td><td>Builder</td><td>Xây dụng 1 đối tượng phức tạp bằng cách xử dụng các đối tượng đơn giản theo từng step.</td></tr><tr><td>5</td><td>Prototype</td><td>Sao chép 1 đối tượng đã có mà không cần new Class.</td></tr><tr><td>6</td><td>Pool</td><td>Quản lí các object có thể tái sử dụng bằng các &#39;pool&#39;</td></tr></tbody></table><h3 id="ii-structural-pattern" tabindex="-1"><a class="header-anchor" href="#ii-structural-pattern"><span>II. Structural pattern:</span></a></h3><p>Những Design pattern loại này liên quan tới class và các thành phần của object. Nó dùng để thiết lập, định nghĩa quan hệ giữa các đối tượng.</p><table><thead><tr><th>#</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>1</td><td>Adapter</td><td>Kết nối các object độc lập, có thể làm việc cùng nhau</td></tr><tr><td>2</td><td>Bridge</td><td>Tách phần abstraction (structural) với phần implementation(xử lí business logic)</td></tr><tr><td>3</td><td>Composite</td><td>Xử lí 1 nhóm object tương tự như 1 object</td></tr><tr><td>4</td><td>Decorator</td><td>Add chức năng mới mà không làm ảnh hưởng đến object.</td></tr><tr><td>5</td><td>Facade</td><td>Cung cấp 1 interface đơn giản cho 1 hệ thống phức tạp hơn.</td></tr><tr><td>6</td><td>Flyweight</td><td>Tái sử dụng các object đã tồn tại, giảm tải bộ nhớ.</td></tr><tr><td>7</td><td>Proxy</td><td>Tạo object sẻ ủy quyền hoặc đại diện cho object khác.</td></tr></tbody></table><h3 id="iii-behavioral-pattern" tabindex="-1"><a class="header-anchor" href="#iii-behavioral-pattern"><span>III. Behavioral pattern:</span></a></h3><p>Nhóm này dùng trong thực hiện các hành vi của đối tượng, sự giao tiếp giữa các object với nhau.</p><table><thead><tr><th>#</th><th><strong>Name</strong></th><th>Description</th></tr></thead><tbody><tr><td>1</td><td>Chain of Responsibility</td><td>Xây dựng 1 chuỗi quá trình xử lí cho đến khi 1 trong số đó xử lí được yêu cầu.</td></tr><tr><td>2</td><td>Command</td><td>Chuyển yêu cầu thành object chứa tất cả thông tin về yêu cầu.</td></tr><tr><td>3</td><td>Iterator</td><td>Truy cập tuần tự các phần tử của 1 cấu trúc phức tạp.</td></tr><tr><td>4</td><td>Mediator</td><td>Giảm sự liên kết (reduces coupling) giữa các thành phần bằng cách làm cho chúng giao tiếp gián tiếp<br>Thông qua 1 đối tượng trung gian (mediator).</td></tr><tr><td>5</td><td>Memento</td><td>Lưu lại trạng thái của 1 đối tượng và có thể khôi phục lại nó trong tương lai.</td></tr><tr><td>6</td><td>Observer</td><td>LThông báo về những thay đổi trạng thái của object cho object khác.</td></tr><tr><td>7</td><td>State</td><td>Thay đổi hành vi (behavior) của object khi trạng thái bên trong của object thay đổi</td></tr><tr><td>8</td><td>Strategy</td><td>Xác định một nhóm thuật toán, đặt mỗi thuật toán vào một lớp riêng biệt và làm cho các đối tượng của chúng có thể hoán đổi cho nhau.</td></tr><tr><td>9</td><td>Template Method</td><td>Xác định khung của 1 thuật toán trong base class, các class con có thể overide lại các step mà không làm thay đổi cấu trúc thuật toán.</td></tr><tr><td>10</td><td>Visitor</td><td>Tách behavior ra khỏi object, từ đó có thể thêm behavior mới vào hệ thống mà không làm thay đổi code hiện tại</td></tr></tbody></table><hr><p><em>refer:</em> <a href="https://refactoring.guru/design-patterns/what-is-pattern" target="_blank" rel="noopener noreferrer">https://refactoring.guru/design-patterns/what-is-pattern</a></p>',15)]))}const g=n(i,[["render",c]]),p=JSON.parse('{"path":"/blogs/OOP/what-s-a-design-pattern_244.html","title":"What’s a design pattern?","lang":"en-US","frontmatter":{"title":"What’s a design pattern?","date":"2025-08-08T00:00:00.000Z","tags":["OOP","Pattern"],"categories":["OOP"],"author":"Admin","location":"VN","description":"Design patterns are typical solutions to commonly occurring problems in software design. They are like pre-made blueprints that you can customize to solve a recurring design problem in your code.","image":null,"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What’s a design pattern?\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-08T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Admin\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/blogs/OOP/what-s-a-design-pattern_244.html"}],["meta",{"property":"og:site_name","content":"Nin Blog"}],["meta",{"property":"og:title","content":"What’s a design pattern?"}],["meta",{"property":"og:description","content":"Design patterns are typical solutions to commonly occurring problems in software design. They are like pre-made blueprints that you can customize to solve a recurring design problem in your code."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Admin"}],["meta",{"property":"article:tag","content":"Pattern"}],["meta",{"property":"article:tag","content":"OOP"}],["meta",{"property":"article:published_time","content":"2025-08-08T00:00:00.000Z"}]]},"git":{},"readingTime":{"minutes":3,"words":901},"filePathRelative":"blogs/OOP/what-s-a-design-pattern_244.md","excerpt":"<h2>What’s a design pattern?</h2>\\n<blockquote>\\n<p>Design patterns are typical solutions to commonly occurring problems in software design. They are like pre-made blueprints that you can customize to solve a recurring design problem in your code.</p>\\n</blockquote>\\n<ul>\\n<li>Design pattern là 1 phương pháp điển hình để giải quyết các vấn đề của phát triển phần mềm.</li>\\n<li>Chúng giống như những bản thiết kế mẫu đầu tiên để từ đó xây dựng code.</li>\\n<li>Không phải là đoạn code cụ thể mà là khái niệm để giải quyết các vấn đề cụ thể.</li>\\n</ul>"}');export{g as comp,p as data};
